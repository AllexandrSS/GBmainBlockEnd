using System;

class Program
{
    static void Main()
    {
        int n = 3;
        Console.Clear();
        Console.WriteLine("Введите строки массива через пробел:");
        string input = Console.ReadLine()!;
        string[] inputArray = input.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        
        int count = 0;
        for (int i = 0; i < inputArray.Length; i++)
        {
            if (inputArray[i].Length <= n)
            {
                count++;
            }
        }
       
        string[] resultArray = new string[count];
        int index = 0;
        for (int i = 0; i < inputArray.Length; i++)
        {
            if (inputArray[i].Length <= n)
            {
                resultArray[index] = inputArray[i];
                index++;
            }
        }
       
        Console.Clear();
        Console.WriteLine($" Это введённый Вами массив и результирующий массив  состоящий из {n} и менее символов :" );
        Console.WriteLine();
        Console.WriteLine($"[ {String.Join(", ", inputArray)} ] -> [ {String.Join(", ", resultArray)} ]");
        Console.ReadLine();
    }
}



/*
1. **Инициализация**: начните с общего блока, представляющего инициализацию переменных и ввод массива строк с клавиатуры. В этом блоке должны быть представлены переменные `input` и `inputArray`.

2. **Формирование массива с подходящими строками**: создайте блок для формирования массива `resultArray` из тех строк, длина которых меньше или равна 3. Этот блок будет включать в себя два цикла: первый для подсчета подходящих элементов и второй для заполнения `resultArray` подходящими строками.

3. **Вывод результата**: добавьте блок для вывода результата. В этом блоке вы можете добавить цикл для вывода каждого элемента `resultArray` или использовать метод `String.Join` для объединения элементов в строку с разделением запятыми.

4. **Главный блок Main**: создайте основной блок, который будет содержать все вышеперечисленные блоки и вызов соответствующих частей кода.

5. **Соедините блоки**: соедините блоки линиями, чтобы показать последовательность выполнения операций.

6. **Добавьте комментарии и описания**: добавьте комментарии к блок-схеме, чтобы пояснить ключевые шаги или решения в коде.

7. **Проверьте логику**: убедитесь, что блок-схема отражает логику программы и позволяет разработчику понять последовательность операций.

При создании блок-схемы уделите особое внимание управляющим конструкциям (условиям, циклам) и взаимодействию с пользователем (вводу/выводу данных). Убедитесь, что блок-схема ясно отражает логику вашего кода и помогает понять последовательность выполнения операций.

ОПИСАНИЕ КОДА ПО ДЕЙСТВИЯМ:

1. **Инициализация переменных и ввод данных**:
- В этом блоке инициализируются переменные `input` и `inputArray`.
- Пользователь по запросу вводит строку, содержащую элементы массива, разделенные запятой.
- Метод `Split` разбивает строку на подстроки на основе разделителя (в данном случае запятая). Параметр `StringSplitOptions.RemoveEmptyEntries` удаляет пустые подстроки, возникающие, например, если запятые идут подряд, что позволяет избежать создания пустых элементов в массиве.

2. **Формирование массива с подходящими строками**:
- Цикл проходится по элементам массива `inputArray` и подсчитывает количество элементов, длина которых меньше или равна 3.
- Создается новый массив `resultArray`, в который копируются только те элементы из `inputArray`, длина которых удовлетворяет условию.

3. **Вывод результата**:
- Создается строка `resultString`, в которую с помощью метода `String.Join` объединяются элементы массива `resultArray`, разделенные запятыми.
- Эта строка выводится на экран, заключенная в квадратные скобки, для отображения результата в желаемом формате.

4. **Ожидание ввода пользователя**:
- Программа приостанавливает свое выполнение, ожидая ввода пользователя для завершения работы.

Таким образом, этот код принимает строку с элементами массива, создает новый массив из элементов исходного массива, удовлетворяющих определенному условию, а затем выводит результат в желаемом формате.

*/